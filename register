#!/usr/bin/env python
import docker
import etcd
import argparse
import signal
import time
import sys
import logging

parser = argparse.ArgumentParser(description="Register the ports of a specfied Docker container with Etcd")
parser.add_argument("--container", help="The container name or id", required = True)

args = parser.parse_args()

def new_etcd_client():
    return etcd.Client(host="172.17.42.1")

def new_docker_client():
    return docker.Client()

def update_container_details(details_already_exist):
  etcd_client = new_etcd_client()
  docker_client = new_docker_client()
  container_details = docker_client.inspect_container(args.container)

  if container_details["State"]["Running"] == True:
    port_bindings = container_details["HostConfig"]["PortBindings"]

    etcd_client.write("/containers/{0}".format(args.container), "", ttl = 60, dir = True, prevExist = details_already_exist)

    for (k, v) in port_bindings.iteritems():
      host_port = v[0]["HostPort"].replace("/tcp", "")
      host = v[0]["HostIp"]
      container_port = k.replace("/tcp", "")

      etcd_client.write("/containers/{0}/ports/{1}/host/".format(args.container, container_port), host)
      etcd_client.write("/containers/{0}/ports/{1}/port/".format(args.container, container_port), host_port)

    return True
  else:
    return False

def deregister_func(container):
  def handler(*args, **kwargs):
    etcd_client = new_etcd_client()
    etcd_client.delete("/containers/{0}".format(container), recursive = True)
    sys.exit(0)

  return handler

deregister = deregister_func(args.container)

signal.signal(signal.SIGTERM, deregister)
signal.signal(signal.SIGINT, deregister)

details_already_exist = False

while True:
  try:
    logging.info("registering container")
    details_already_exist = update_container_details(details_already_exist)
  except Exception as e:
    logging.warning("registration failed")
    logging.warning(e)
    details_already_exist = False
  time.sleep(30)
